#!/bin/bash -ex

OUTDIR=/etc/cfssl

function error {
  echo "✗ Error on line $1"'!'
  exit 1
}
trap 'error $LINENO' ERR

DNS1="kubernetes"
DNS2="kubernetes.default"
DNS3="kubernetes.default.svc"
DNS4="kubernetes.default.svc.cluster.local"
DEFAULT_HOSTS="$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1"

function csr {
  cat <<EOF
{"CN":"$1","hosts":[""],"key":{"algo":"rsa","size":2048}}
EOF
}

function generate {

  CN=$1
  PROFILE=$2
  HOSTS=$3

  echo "$(csr $CN)" \
    | cfssl gencert \
      -remote=localhost:8888 \
      -profile=$PROFILE \
      -hostname="$HOSTS" - \
    | cfssljson -bare $CN

  chmod 0644 $${CN}.pem $${CN}-key.pem

}

mkdir -p $OUTDIR && cd $OUTDIR

generate k8s-apiserver client-server "$${DEFAULT_HOSTS},${ ip-k8s-service },master.${ internal-tld },*.${ region }.elb.amazonaws.com"
generate k8s-etcd client-server "etcd.${ internal-tld },${ fqdn }"


----



#!/bin/bash -ex

function usage { cat <<EOF

USAGE: $0 output-dir
  example: $0 test-cfssl test

EOF

  exit 1
}

OUTDIR=$1
[ -z "$OUTDIR" ] && usage

function error {
  echo "✗ Error on line $1"'!'
  exit 1
}
trap 'error $${LINENO}' ERR

DNS1="kubernetes"
DNS2="kubernetes.default"
DNS3="kubernetes.default.svc"
DNS4="kubernetes.default.svc.cluster.local"
DEFAULT_HOSTS="$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1"

function csr {
  cat <<EOF
{"CN":"$1","hosts":[""],"key":{"algo":"rsa","size":2048}}
EOF
}

function generate {

  CN=$1
  PROFILE=$2
  HOSTS=$3

  echo "$(csr $CN)" \
    | cfssl gencert \
      -remote=localhost:8888 \
      -profile=$PROFILE \
      -hostname="$HOSTS" - \
    | cfssljson -bare $CN

  chmod 0644 $${CN}.pem $${CN}-key.pem

}

mkdir -p $OUTDIR && cd $OUTDIR

generate k8s-worker client "$${DEFAULT_HOSTS},*.*.compute.internal,*.ec2.internal"
