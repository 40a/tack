#!/bin/bash -e

function usage {
  echo "USAGE: $0 <output-dir> <aws-region>"
  echo "  example: $0 .cfssl us-west-1"
  exit 1
}

OUTDIR=$1
if [ -z "$OUTDIR" ]; then
  usage
fi

AWS_REGION="$2"
if [ -z "$AWS_REGION" ]; then
  usage
fi

set -o nounset
set -o pipefail
set -x

function ca-csr {
  cat <<EOF
{
  "CN": "CA",
  "key": { "algo": "rsa", "size": 2048 },
  "names": [{ "C": "US", "L": "San Francisco", "O": "Kubernetes", "ST": "California" }]
}
EOF
}

function ca-config {
  cat <<EOF
{
  "signing": {
    "default": { "expiry": "43800h" },
    "profiles": {
      "server": {
        "expiry": "43800h",
        "usages": [ "signing", "key encipherment", "server auth" ]
      },
      "client": {
        "expiry": "43800h",
        "usages": [ "signing", "key encipherment", "client auth" ]
      },
      "client-server": {
        "expiry": "43800h",
        "usages": [ "signing", "key encipherment", "server auth", "client auth" ]
      }
    }
  }
}
EOF
}

function csr {
  cat <<EOF
{"CN":"$1","hosts":[""],"key":{"algo":"rsa","size":2048}}
EOF
}

DEFAULT_HOSTS="kubernetes,kubernetes.default,127.0.0.1"

function generate {
  CN=$1
  PROFILE=$2
  HOSTS=$DEFAULT_HOSTS,$3

  echo "$(csr $CN)" \
    | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=$PROFILE \
      -hostname="$HOSTS" - \
    | cfssljson -bare $CN

  tar -cf $CN.tar ca.pem $CN.pem ${CN}-key.pem
}

mkdir -p $OUTDIR && cd $OUTDIR
echo "$(ca-csr)" >ca-csr.json
echo "$(ca-config)" >ca-config.json

# generate ca
cfssl gencert -initca ca-csr.json | cfssljson -bare ca -

# generate keys and certs
generate k8s-admin client-server "10.0.0.15,*.*.compute.internal*.ec2.internal"
generate k8s-apiserver client-server "10.0.0.15,10.3.0.1,master.k8s,*.$AWS_REGION.elb.amazonaws.com"
generate k8s-etcd server "*.k8s"
generate k8s-worker client "*.*.compute.internal,*.ec2.internal"

# TODO: fix cert provisioning hacks
tar -rf k8s-apiserver.tar k8s-etcd.pem k8s-etcd-key.pem

# lock down perms
chmod 644 *
