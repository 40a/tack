#cloud-config

---
coreos:

  etcd2:
    advertise-client-urls: http://${ fqdn }:2379
    discovery-srv: ${ internal-tld }
    initial-advertise-peer-urls: https://${ fqdn }:2380
    initial-cluster-state: new
    initial-cluster-token: ${ cluster-token }
    listen-client-urls: http://0.0.0.0:2379
    listen-peer-urls: https://0.0.0.0:2380
    name: ${ hostname }
    peer-trusted-ca-file: /etc/kubernetes/ssl/ca.pem
    peer-client-cert-auth: true
    peer-cert-file: /etc/kubernetes/ssl/k8s-etcd.pem
    peer-key-file: /etc/kubernetes/ssl/k8s-etcd-key.pem
    # heartbeat-interval: 250
    # election-timeout: 1250

  units:
    - name: etcd2.service
      command: start
      drop-ins:
        - name: wait-for-certs.conf
          content: |
            [Unit]
            After=get-ssl.service
            After=get-rootca-certificate.service
            Requires=get-ssl.service
            Requires=get-rootca-certificate.service
            ConditionPathExists=/etc/kubernetes/ssl/ca.pem
            ConditionPathExists=/etc/kubernetes/ssl/k8s-etcd.pem
            ConditionPathExists=/etc/kubernetes/ssl/k8s-etcd-key.pem

    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Service]
            ExecStartPre=-/usr/bin/etcdctl mk /coreos.com/network/config \
              '{ "Network": "${ pod-ip-range }", "Backend": { "Type": "vxlan" } }'
            Restart=always
            RestartSec=10

    - name: docker.service
      command: start
      drop-ins:
        - name: 40-flannel.conf
          content: |
            [Unit]
            After=flanneld.service
            Requires=flanneld.service
            [Service]
            Restart=always
            RestartSec=10
        # fixme: still need overlay ?
        - name: overlay.conf
          content: |
            [Service]
            Environment="DOCKER_OPTS=--storage-driver=overlay"

    - name: get-ssl.service
      command: start
      content: |
        [Unit]
        After=cfssl.service
        Requires=cfssl.service

        Description=Get ssl artifacts from s3 bucket using IAM role
        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /etc/kubernetes/ssl
        ExecStart=/opt/bin/create-certificates
        RemainAfterExit=yes
        Type=oneshot

    - name: cfssl.service
      command: start
      content: |
        [Unit]
        After=network-online.target
        Requires=network-online.target
        Before=etcd2.service
        Description=setup cfssl
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=-/usr/bin/mkdir --parents /opt/bin
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssl https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
        ExecStartPre=/usr/bin/curl -L -o /opt/bin/cfssljson https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
        ExecStart=/usr/bin/chmod +x /opt/bin/cfssl /opt/bin/cfssljson

    - name: get-rootca-certificate.service
      command: start
      content: |
        [Unit]
        Before=etcd2.service
        Description=get rootca certificate from s3
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStartPre=-/usr/bin/mkdir --parents /etc/kubernetes/ssl
        ExecStart=/opt/bin/fetch-rootca-certificate

    - name: kubelet.service
      command: start
      runtime: true
      content: |
        [Unit]
        ConditionFileIsExecutable=/usr/lib/coreos/kubelet-wrapper
        After=flanneld.service
        Requires=flanneld.service
        [Service]
        Environment="KUBELET_ACI=${ hyperkube-image }"
        Environment="KUBELET_VERSION=${ hyperkube-tag }"
        Environment="RKT_OPTS=\
          --volume dns,kind=host,source=/etc/resolv.conf \
          --mount volume=dns,target=/etc/resolv.conf \
          --volume rkt,kind=host,source=/opt/bin/host-rkt \
          --mount volume=rkt,target=/usr/bin/rkt \
          --volume var-lib-rkt,kind=host,source=/var/lib/rkt \
          --mount volume=var-lib-rkt,target=/var/lib/rkt \
          --volume stage,kind=host,source=/tmp \
          --mount volume=stage,target=/tmp \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log"
        ExecStartPre=/usr/bin/rkt trust --trust-keys-from-https --prefix=quay.io/coreos/hyperkube
        ExecStartPre=/usr/bin/rkt fetch ${ hyperkube-image }:${ hyperkube-tag }
        ExecStartPre=/usr/bin/docker pull ${ hyperkube }
        ExecStartPre=/usr/bin/systemctl is-active flanneld.service
        ExecStartPre=/usr/bin/mkdir -p /var/log/containers
        ExecStartPre=/usr/bin/mkdir -p /var/lib/kubelet
        ExecStartPre=/usr/bin/mount --bind /var/lib/kubelet /var/lib/kubelet
        ExecStartPre=/usr/bin/mount --make-shared /var/lib/kubelet
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --allow-privileged=true \
          --api-servers=http://127.0.0.1:8080 \
          --cloud-provider=aws \
          --cluster-dns=${ dns-service-ip } \
          --cluster-domain=${ cluster-domain } \
          --config=/etc/kubernetes/manifests \
          --register-schedulable=false
        Restart=always
        RestartSec=5
        [Install]
        WantedBy=multi-user.target

  update:
    reboot-strategy: etcd-lock

write-files:
  - path: /opt/bin/host-rkt
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/sh
      exec nsenter -m -u -i -n -p -t 1 -- /usr/bin/rkt "$@"

  - path: /etc/kubernetes/manifests/kube-apiserver.yml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-apiserver
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-apiserver
          image: ${ hyperkube }
          command:
          - /hyperkube
          - apiserver
          - --admission-control=NamespaceLifecycle,LimitRanger,DefaultStorageClass,ResourceQuota,ServiceAccount
          - --advertise-address=$private_ipv4
          - --apiserver-count=3
          - --allow-privileged=true
          - --anonymous-auth=false
          - --client-ca-file=/etc/kubernetes/ssl/ca.pem
          - --cloud-provider=aws
          - --enable-swagger-ui
          - --etcd-servers=http://etcd.${ internal-tld }:2379
          - --runtime-config=extensions/v1beta1/networkpolicies=true,batch/v2alpha1
          - --secure-port=443
          - --service-account-key-file=/etc/kubernetes/ssl/service-account-key.pem
          - --service-account-lookup
          - --service-cluster-ip-range=${ service-cluster-ip-range }
          - --tls-cert-file=/etc/kubernetes/ssl/k8s-apiserver.pem
          - --tls-private-key-file=/etc/kubernetes/ssl/k8s-apiserver-key.pem
          - --v=9
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              port: 8080
              path: /healthz
            initialDelaySeconds: 15
            timeoutSeconds: 15
          ports:
          - containerPort: 443
            hostPort: 443
            name: https
          - containerPort: 8080
            hostPort: 8080
            name: local
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host

  - path: /etc/kubernetes/manifests/kube-controller-manager.yml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-controller-manager
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-controller-manager
          image: ${ hyperkube }
          command:
          - /hyperkube
          - controller-manager
          - --cloud-provider=aws
          - --leader-elect=true
          - --master=http://127.0.0.1:8080
          - --root-ca-file=/etc/kubernetes/ssl/ca.pem
          - --service-account-private-key-file=/etc/kubernetes/ssl/service-account-key.pem
          resources:
            requests:
              cpu: 200m
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10252
            initialDelaySeconds: 15
            timeoutSeconds: 1
          volumeMounts:
          - mountPath: /etc/kubernetes/ssl
            name: ssl-certs-kubernetes
            readOnly: true
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
        volumes:
        - hostPath:
            path: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host

  - path: /etc/kubernetes/manifests/kube-proxy.yml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-proxy
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-proxy
          image: ${ hyperkube }
          command:
          - /hyperkube
          - proxy
          - --master=http://127.0.0.1:8080
          securityContext:
            privileged: true
          volumeMounts:
          - mountPath: /etc/ssl/certs
            name: ssl-certs-host
            readOnly: true
          - mountPath: /var/run/dbus
            name: dbus
            readOnly: false
        volumes:
        - hostPath:
            path: /usr/share/ca-certificates
          name: ssl-certs-host
        - hostPath:
            path: /var/run/dbus
          name: dbus

  - path: /etc/kubernetes/manifests/kube-scheduler.yml
    content: |
      apiVersion: v1
      kind: Pod
      metadata:
        name: kube-scheduler
        namespace: kube-system
      spec:
        hostNetwork: true
        containers:
        - name: kube-scheduler
          image: ${ hyperkube }
          command:
          - /hyperkube
          - scheduler
          - --leader-elect=true
          - --master=http://127.0.0.1:8080
          resources:
            requests:
              cpu: 100m
          livenessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: 10251
            initialDelaySeconds: 15
            timeoutSeconds: 1

  - path: /etc/logrotate.d/docker-containers
    content: |
      /var/lib/docker/containers/*/*.log {
        rotate 7
        daily
        compress
        size=1M
        missingok
        delaycompress
        copytruncate
      }

  - path: /opt/bin/fetch-rootca-certificate
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/bash -e
      until /usr/bin/rkt run \
        --net=host \
        --trust-keys-from-https \
        --volume=dns,kind=host,source=/etc/resolv.conf,readOnly=true --mount volume=dns,target=/etc/resolv.conf \
        --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false --mount=volume=ssl,target=/etc/kubernetes/ssl \
        quay.io/coreos/awscli -- aws s3 cp s3://${ pki-s3-bucket }/ca.pem /etc/kubernetes/ssl
      do
        echo "retrying"
        sleep 5.2
      done
      echo "✓"

  - path: /etc/kubernetes/ssl/service-account-key.pem
    permissions: 0755
    owner: root:root
    content: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEpQIBAAKCAQEA6wD36kBQG4+C4Zyw+pEagFRQsMBwUFh/DWPEFNWDbPKLOkiu
      l09VelU4lGcMAb+i7DZtkiA+VAIuLzg0gPpIltYwq1L904khulWf3D0LtyWReH0/
      VgnyMS1hgpWIvMF//IKALjsB4WEu60Twc3j50PjaG04KvuSZcP27jvYMMhCqGWiP
      si3I8yOali9Zbu0ximO0qaQtKYceFhHW95e38L1Jgb60Qh2UtXHyp5cfUseQaPXx
      5oyXpxyNTU/RBJUo/Oj/hk5gZDPwriXWWMqqt4VXrWDxQSBI1pA5CVYYBp9jsvI4
      9KwSsML1nV1X7VAT6YReK/hCmqHT8aeH9uey7wIDAQABAoIBAQDCEW2qVGwTJoOW
      HxkEA1pYScjM/k6B+2MIwq/F6MD88ptJiYYszEYxnTj5TNPcic5YtWXs+5WdOKO9
      OPQa4xWZAs70XLfivedNgrJeZUdMesjUMNJiEhqgw/I3rZdbEYzJEVgbVX1rCx99
      CNRs96WODkPHsr4rAIs6hT8jg0t09zrxsBUKM3G+VFhqC52E1vwddperlCXp+/G8
      X7F2UVCMEOeOKmK1G3ae/6TjtvVD85XLHRiUMRa+z6rtVMECGIY8itqbjcWqX2CF
      gJbTBqUpuVG9LhLM+p1cAl4wjJ5SBmg0e0d3wco3/jTbtNcOJld/i+Q+LYJgeXfk
      ihaedanRAoGBAPdQ/5C03P2TTWqNjfXfwhIHIUlbBF1BQXqwD7zpaelFBVdp0XWV
      IxpLaY6FVxkLUWrr3eS4vyY/6r5+QzE1RINcX87qqoO5L5qbkXl8ayk9fvb0zIW8
      Tc52AvFazo2+fb5eVEUzqc/Hzg6jCJ8W5CLTOXWQYUXAa9cg3eSNhpbnAoGBAPNB
      TFoCon0tPh6YuEjr8qLOHrv+OhaOW4CXs3f7VJOBHeMCOtfpObZFnm++nXf0T6FO
      ZzsUL4XUDVXAEgnl7WSRgzXT/3g30tcsQ4EP+z6qmLFvDPQcY12LQvkoNWII4GR2
      PvsJxq9y54y9yVvmWdO0N0xnauGY7lHHQao4b2q5AoGBAM6VSxS97walf3osydMC
      2GIksIpMy8V119M6s7qyInTm4YJV8s/MBqlVKtQQz2MtEBJG+W+vXoP9ygDbCRdW
      jmdHxwPZAxvKmVgE8KxQ4FZvdtmkPB7N3xRBgU3H81d1MiXNN4kikYrtNFMHnhD9
      lwz78TghpQ8Vnz7wxki+axkrAoGBAOjicA2Qji3XXax/O5ccxUvWmBgVGVm06qdf
      FQPeS6d4KrvFy74f3A/D8R48WJeZ/46H+E7YUXMHg8i/vMVbKn5ozTyAfQmEMEeu
      aeYq/beOLedZUQZ4Ey1ggTr2orz7kJC9oChIwL4B/OqCXD+udfs3guWT8QCQoEEM
      ybIEm66JAoGAGdt7Dp4/MG1EGAd6ORqZXwEsxkCbR2b1ylmc7PKxwjkC+4M2IUSt
      JWpuQWK+iaNT64Dx+/PoY18TrS5IJix+s9na94vj27xoKUbpLH9gDxs00D3RWcvr
      vIxhlwuf6j0dU335Rw+5Zko6d72psVljsFoit4bVR2ZrlxYEei6usJw=
      -----END RSA PRIVATE KEY-----

  - path: /opt/bin/create-certificates
    permissions: 0755
    owner: root:root
    content: |
      #!/bin/bash -ex

      OUTDIR=/etc/kubernetes/ssl

      function error {
        echo "✗ Error on line $1"'!'
        exit 1
      }
      trap 'error $LINENO' ERR

      until printf "." && curl -d '{"label":"primary"}' http://pki.${ internal-tld }:8888/api/v1/cfssl/info &>/dev/null
      do sleep 5.2; done; echo "✓"

      DNS1="kubernetes"
      DNS2="kubernetes.default"
      DNS3="kubernetes.default.svc"
      DNS4="kubernetes.default.svc.cluster.local"
      DEFAULT_HOSTS="$DNS1,$DNS2,$DNS3,$DNS4,127.0.0.1"

      function csr {
        cat <<EOF
      {"CN":"$1","hosts":[""],"key":{"algo":"rsa","size":2048}}
      EOF
      }

      function generate {

        CN=$1
        PROFILE=$2
        HOSTS=$3

        echo "$(csr $CN)" \
          | /opt/bin/cfssl gencert \
            -remote=pki.${ internal-tld }:8888 \
            -profile=$PROFILE \
            -hostname="$HOSTS" - \
          | /opt/bin/cfssljson -bare $CN

        chmod 0644 $${CN}.pem $${CN}-key.pem

      }

      mkdir -p $OUTDIR && cd $OUTDIR

      generate k8s-apiserver client-server "$${DEFAULT_HOSTS},${ ip-k8s-service },master.${ internal-tld },*.${ region }.elb.amazonaws.com,$(hostname),10.0.10.10,10.0.10.11,10.0.10.12"
      generate k8s-etcd client-server "etcd.${ internal-tld },${ fqdn }"
