.terraform: ; terraform get

terraform.tfvars:
<<<<<<< HEAD
	./scripts/init-variables ${AWS_REGION} ${COREOS_CHANNEL} ${COREOS_VM_TYPE} ${AWS_EC2_KEY_NAME} >$@
	echo "name = \"${CLUSTER_NAME}\"" >>$@
	IP=`scripts/myip` && echo "cidr.allow-ssh = \"$${IP}\"" >>$@
	echo "aws.key-name = \"${AWS_EC2_KEY_NAME}\"" >>$@
	echo "aws.region = \"${AWS_REGION}\"" >>$@
	if [ -f ./vpc-existing.tfvars ]; then cat ./vpc-existing.tfvars >>terraform.tfvars ; fi >>$@
	# Elide the vpc-existing.tfvars into the tfvars
=======
	@./scripts/init-variables \
		${AWS_REGION} ${COREOS_CHANNEL} ${COREOS_VM_TYPE} ${AWS_EC2_KEY_NAME} \
		${INTERNAL_TLD} ${CLUSTER_NAME} `scripts/myip`

module.%:
	@echo "${BLUE}❤ make $@ - commencing${NC}"
	@time terraform apply -target $@
	@echo "${GREEN}✓ make $@ - success${NC}"
	@sleep 5.2
>>>>>>> 860dbd5087684559f598e3568a3a25ede38f57c5

## terraform apply
apply: plan
	@echo "${BLUE}❤ terraform apply - commencing${NC}"
	terraform apply
	@echo "${GREEN}✓ make $@ - success${NC}"

## terraform destroy
destroy: ; terraform destroy

## terraform get
get: ; terraform get

## generate variables
init: terraform.tfvars

## terraform plan
plan: get init
	terraform validate
	@echo "${GREEN}✓ terraform validate - success${NC}"
	terraform plan -out terraform.tfplan

## terraform show
show: ; terraform show

.PHONY: apply destroy get init module.% plan show
